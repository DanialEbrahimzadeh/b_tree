<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>